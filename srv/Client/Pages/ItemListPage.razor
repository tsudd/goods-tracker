@page "/items"
@using GoodsTracker.Platform.Shared.Models
@using System.Globalization
@inject HttpClient Http
@inject IStringLocalizer<SharedResource> Loc

<PageTitle>@Loc["ItemListPageTitle"]</PageTitle>

<h1>@Loc["ItemListPageTitle"]</h1>

@if (items == null)
{
    <p><em>@Loc["LoadingLabel"]...</em></p>
}
else
{
    <div class="row row-cols-1 row-cols-md-4 g-4">
    @foreach (var item in items)
        {
            <div class="col">
                <div class="card h-100">
                    <img src="@item.ImgLink" class="card-img-top img-fluid" alt="@item.Name">
                    <div class="card-img-overlay">
                        <button type="button" class="btn">
                            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor"
                        class="bi bi-heart" viewBox="0 0 16 16">
                                <path
                            d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01L8 2.748zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15z" />
                            </svg>
                        </button>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <div class="h-35 d-inline-block">
                            <h5 class="card-title">@item.Name</h5>
                        </div>
                        <div class="card-text text-end fw-light mt-auto">
                            @item.Weight
                            <small>@item.WeightUnit</small>
                        </div>
                        <p class="card-text price fs-3 text-end">
                            @if (item.OnDiscount)
                            {
                                var price = BuildPrice(item.DiscountPrice);
                                <span class="text-decoration-line-through">@item.Price<small>@item.Currensy</small></span>
                                <span class="fw-bold text-danger">@price.MainPart.<small class="cents">@price.Cents</small></span>
                                <span class="fst-italic fs-6 text-danger">@item.Currensy</span>
                            }
                            else
                            {
                                var price = BuildPrice(item.Price);
                                <span class="fw-bold">@price.MainPart.<small class="cents">@price.Cents</small></span>
                                <span class="fst-italic fs-6">@item.Currensy</span>
                            }
                        </p>
                        <div class="row justify-content-end text-end">
                            <span class="col ">@item.Country</span>
                        </div>
                        <div class="row justify-content-end">
                            <span class="col-4 badge bg-primary text-wrap">@item.VendorName</span>
                        </div>
                        @if (item.OnDiscount)
                        {
                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                <span class="col-4 badge bg-danger text-wrap">@Loc["DiscountLabel"] @item.Discount %</span>
                            </span>
                        }
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">@Loc["FetchDateLabel"]
                            @item.FetchDate.ToString("dd/MM/yyyy")</small>
                    </div>
                </div>
            </div>
        }
    </div>
}
<div class="row justify-content-center">
    <ul class="pagination">
        <li class="page-item @(currentPage == 1 ? "disabled" : "")" @onclick="PrevPage">
            <a class="page-link" aria-disabled="true">@Loc["PreviusPageLabel"]</a>
        </li>
        @for (var i = currentPage - 2; i <= currentPage + 2; i++)
        {
            if (i <= 0 || i > TotalPages)
                continue;
            int j = i;
            if (i == currentPage)
            {
                <li class='page-item active' @onclick='() => ShowInfo(j)'>
                    <a class="page-link">@i</a>
                </li>
            }
            else
            {
                <li class='page-item' @onclick='() => ShowInfo(j)'>
                    <a class="page-link">@i</a>
                </li>
            }
        }
        <li class="page-item" @onclick="NextPage">
            <a class="page-link">@Loc["NextPageLabel"]</a>
        </li>
    </ul>
</div>

@code {
    private BaseItemModel[]? items;
    private int currentPage = 1;
    public int Count { get; set; }
    public int PageSize { get; set; } = 30;
    public int TotalPages { get; set; } = 0;

    protected (string MainPart, string Cents) BuildPrice(decimal price)
    {
        var priceParts = price.ToString(CultureInfo.InvariantCulture).Split('.');
        return (priceParts[0], priceParts[1]);
    }

    protected override async Task OnInitializedAsync()
    {
        Count = await Http.GetFromJsonAsync<int>("/ItemList/count");
        TotalPages = (int)Math.Ceiling(decimal.Divide(Count, PageSize));
        await ShowInfo();
    }

    protected async Task NextPage()
    {
        if (currentPage < TotalPages) { currentPage++; await ShowInfo(); }
    }
    protected async Task PrevPage()
    {
        if
        (currentPage > 1)
        {
            currentPage--;
            await ShowInfo();
        }
    }

    protected async Task ShowInfo()
    {
        items = await Http.GetFromJsonAsync<BaseItemModel[]>($"/ItemList?page={currentPage}");
    }

    protected async Task ShowInfo(int page)
    {
        currentPage = page;
        await ShowInfo();
    }
}