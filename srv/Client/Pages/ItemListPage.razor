@page "/items"
@using GoodsTracker.Platform.Shared.Models
@using System.Globalization
@inject HttpClient Http
@inject IStringLocalizer<SharedResource> Loc

<PageTitle>@Loc["ItemListPageTitle"]</PageTitle>

<h1>@Loc["ItemListPageTitle"]</h1>

<label for="search-input" class="form-label">@Loc["TotalItemsLabel"]: <span class="fw-bold">@Count</span></label>
<div class="input-group mb-3">
    <input type="text" class="form-control" id="search-input" placeholder="@Loc["SearchPlaceholder"]"
        aria-label="@Loc["SearchPlaceholder"]: " aria-describedby="button-addon2" @bind="SearchInput">
    <button class="btn btn-primary" type="button" id="button-addon2" @onclick="() => ShowInfo(1)"><svg
            xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search"
            viewBox="0 0 16 16">
            <path
                d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
        </svg></button>
</div>
<div class="row g-3">
    <div class="col-md-3">
        <label class="form-label" for="orderby">@Loc["OrderByLabel"]</label>
        <select id="orderby" class="form-select">
            <option value=""></option>
            <option>@Loc["CheapFirstOrder"]</option>
            <option>@Loc["ExpensiveFirstOrder"]</option>
            <option>@Loc["UpdateDateOrder"]</option>
        </select>
    </div>
    <div class="col-md-3">
        <label class="form-label" for="shop">@Loc["FilterShopLabel"]</label>
        @* TODO: make shop select multiple *@
        <select id="shop" class="form-select">
            <option value="">@Loc["AllShopsLabel"]</option>
        </select>
    </div>
    <div class=" col-md-3">
        <label class="form-label" for="switches">@Loc["SearchSetupsLabel"]</label>
        <div class="form-check form-switch" id="switches">
            <input class="form-check-input" type="checkbox" id="onDiscountOnlySwitch">
            <label class="form-check-label" for="onDiscountOnlySwitch">@Loc["OnlyDiscountsLabel"]</label>
        </div>
    </div>
</div>

<hr>

@if (items == null)
{
    <p><em>@Loc["LoadingLabel"]...</em></p>
}
else
{
    <div class="row row-cols-1 row-cols-md-4 g-4">
    @foreach (var item in items)
        {
            <ItemCard Item=item />
        }
    </div>
}
<div class="row justify-content-center">
    <ul class="pagination">
        <li class="page-item @(currentPage == 1 ? "disabled" : "")" @onclick="PrevPage">
            <a class="page-link" aria-disabled="true">@Loc["PreviusPageLabel"]</a>
        </li>
        @for (var i = currentPage - 2; i <= currentPage + 2; i++)
        {
            if (i <= 0 || i > TotalPages)
                continue;
            int j = i;
            if (i == currentPage)
            {
                <li class='page-item active' @onclick='() => ShowInfo(j)'>
                    <a class="page-link">@i</a>
                </li>
            }
            else
            {
                <li class='page-item' @onclick='() => ShowInfo(j)'>
                    <a class="page-link">@i</a>
                </li>
            }
        }
        <li class="page-item" @onclick="NextPage">
            <a class="page-link">@Loc["NextPageLabel"]</a>
        </li>
    </ul>
</div>

@code {
    private BaseItemModel[]? items;
    public string SearchInput { get; set; } = string.Empty;
    private int currentPage = 1;
    public int Count { get; set; }
    public int PageSize { get; set; } = 30;
    public int TotalPages { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        Count = await Http.GetFromJsonAsync<int>("/ItemList/count");
        TotalPages = (int)Math.Ceiling(decimal.Divide(Count, PageSize));
        await ShowInfo();
    }

    protected async Task NextPage()
    {
        if (currentPage < TotalPages) { currentPage++; await ShowInfo(); }
    }
    protected async Task PrevPage()
    {
        if
        (currentPage > 1)
        {
            currentPage--;
            await ShowInfo();
        }
    }

    protected async Task ShowInfo()
    {
        if (SearchInput.Length > 0)
        {
            items = await Http.GetFromJsonAsync<BaseItemModel[]>($"/ItemList/search?page={currentPage}&q={SearchInput}");
            return;
        }
        items = await Http.GetFromJsonAsync<BaseItemModel[]>($"/ItemList?page={currentPage}");
    }

    protected async Task ShowInfo(int page)
    {
        currentPage = page;
        await ShowInfo();
    }
}