@page "/items"
@using GoodsTracker.Platform.Shared.Models
@using System.Globalization
@inject HttpClient Http
@inject IStringLocalizer<SharedResource> Loc

<PageTitle>@Loc["ItemListPageTitle"]</PageTitle>

<h1>@Loc["ItemListPageTitle"]</h1>

<label for="search-input" class="form-label">@Loc["TotalItemsLabel"]: <span class="fw-bold">@Count</span></label>
<div class="input-group mb-3">
    <input type="text" class="form-control" id="search-input" placeholder="@Loc["SearchPlaceholder"]"
        aria-label="@Loc["SearchPlaceholder"]: " aria-describedby="button-addon2" @bind="SearchInput">
    <button class="btn btn-primary" type="button" id="button-addon2" @onclick="() => SearchItems()"><svg
            xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search"
            viewBox="0 0 16 16">
            <path
                d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
        </svg></button>
</div>
<div class="row g-3">
    <div class="col-md-3">
        <label class="form-label" for="orderby">@Loc["OrderByLabel"]</label>
        <select id="orderby" class="form-select">
            <option value=""></option>
            <option>@Loc["CheapFirstOrder"]</option>
            <option>@Loc["ExpensiveFirstOrder"]</option>
            <option>@Loc["UpdateDateOrder"]</option>
        </select>
    </div>
    <div class="col-md-3">
        <label class="form-label" for="shop">@Loc["FilterShopLabel"]</label>
        @* TODO: make shop select multiple *@
        <select id="shop" class="form-select">
            <option value="">@Loc["AllShopsLabel"]</option>
        </select>
    </div>
    <div class=" col-md-3">
        <label class="form-label" for="switches">@Loc["SearchSetupsLabel"]</label>
        <div class="form-check form-switch" id="switches">
            <input class="form-check-input" type="checkbox" id="onDiscountOnlySwitch">
            <label class="form-check-label" for="onDiscountOnlySwitch">@Loc["OnlyDiscountsLabel"]</label>
        </div>
    </div>
</div>

<hr>

<div class="row row-cols-1 row-cols-md-4 g-4">
    <InfiniteScrolling ItemsProvider="GetItems" @ref="Scroller">
        <ItemTemplate Context="item">
            <ItemCard Item=item />
        </ItemTemplate>
        <LoadingTemplate>
            <div><span class="oi oi-reload spin"></span> Loading more items...</div>
        </LoadingTemplate>
    </InfiniteScrolling>
</div>


@code {
    public string SearchInput { get; set; } = string.Empty;
    public int Count { get; set; }
    public int PageSize { get; set; } = 30;
    public int TotalPages { get; set; } = 0;
    public InfiniteScrolling<BaseItemModel>? Scroller { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Count = await Http.GetFromJsonAsync<int>("/ItemList/count");
    }

    protected async Task<IEnumerable<BaseItemModel>> GetItems(InfiniteScrollingItemsProviderRequest request)
    {
        if (SearchInput.Length > 0)
        {
            return await Http.GetFromJsonAsync<BaseItemModel[]>($"/ItemList/search?index={request.StartIndex}&q={SearchInput}") ??
            Enumerable.Empty<BaseItemModel>();
        }
        return await Http.GetFromJsonAsync<BaseItemModel[]>($"/ItemList?index={request.StartIndex}") ??
        Enumerable.Empty<BaseItemModel>();
    }

    protected Task SearchItems()
    {
        Scroller?.ResetList();
        return Task.CompletedTask;
    }
}