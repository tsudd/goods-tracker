@page "/items"
@using GoodsTracker.Platform.Shared.Models
@inject HttpClient Http

<PageTitle>Items</PageTitle>

<h1>Items</h1>

@if (items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Price</th>
            <th scope="col">Price with discount</th>
            <th scope="col">Discount %</th>
            <th scope="col">Fetch date</th>
            <th scope="col">Shop</th>
        </tr>
    </thead>
    <tbody>
        @{
                var ind = (currentPage - 1) * PageSize + 1;
            }
            @foreach (var item in items)
            {
                <tr>
                    <th scope="row">@ind</th>
                    <th scope="row">@item.Name</th>
                    @if (item.Price is null)
                    {
                        <th scope="row"></th>
                    }
                    else
                    {
                        <th scope="row">@item.Price</th>
                    }
                    @if (item.DiscountPrice is null)
                    {
                        <th scope="row"></th>
                    }
                    else
                    {
                        <th scope="row">@item.DiscountPrice</th>
                    }
                    <th scope="row">@item.Discount</th>
                    <th scope="row">@item.FetchDate?.ToString("dd-MM-yyyy")</th>
                    <th scope="row">@item.VendorName</th>
                </tr>
                ind++;
            }
        </tbody>
    </table>
}
<div class="row justify-content-center">
    <ul class="pagination">
        <li class="page-item @(currentPage == 1 ? "disabled" : "")" @onclick="PrevPage">
            <a class="page-link" aria-disabled="true">Previous</a>
        </li>
        @for (var i = currentPage - 2; i <= currentPage + 2; i++)
        {
            if (i <= 0 || i > TotalPages)
                continue;
            int j = i;
            if (i == currentPage)
            {
                <li class='page-item active' @onclick='() => ShowInfo(j)'>
                    <a class="page-link">@i</a>
                </li>
            }
            else
            {
                <li class='page-item' @onclick='() => ShowInfo(j)'>
                    <a class="page-link">@i</a>
                </li>
            }
        }
        <li class="page-item" @onclick="NextPage">
            <a class="page-link">Next</a>
        </li>
    </ul>
</div>

@code {
    private BaseItemModel[]? items;
    private int currentPage = 1;
    public int Count { get; set; }
    public int PageSize { get; set; } = 30;
    public int TotalPages { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        Count = await Http.GetFromJsonAsync<int>("/ItemList/count");
        TotalPages = (int)Math.Ceiling(decimal.Divide(Count, PageSize));
        await ShowInfo();
    }

    protected async Task NextPage()
    {
        if (currentPage < TotalPages) { currentPage++; await ShowInfo(); }
    }
    protected async Task PrevPage()
    {
        if
        (currentPage > 1)
        {
            currentPage--;
            await ShowInfo();
        }
    }

    protected async Task ShowInfo()
    {
        items = await Http.GetFromJsonAsync<BaseItemModel[]>($"/ItemList?page={currentPage}");
    }

    protected async Task ShowInfo(int page)
    {
        currentPage = page;
        await ShowInfo();
    }
}