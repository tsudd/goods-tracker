@page "/items"
@using GoodsTracker.Platform.Shared.Models
@inject HttpClient Http
@inject IStringLocalizer<SharedResource> Loc

<PageTitle>@Loc["ItemListPageTitle"]</PageTitle>

<h1>@Loc["ItemListPageTitle"]</h1>

@if (items == null)
{
    <p><em>@Loc["LoadingLabel"]...</em></p>
}
else
{
    <div class="row row-cols-1 row-cols-md-4 g-4">
    @foreach (var item in items)
        {
            <div class="col">
                <div class="card h-100">
                    <img src="@item.ImgLink" class="card-img-top img-fluid" alt="...">
                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        <p class="card-text"><small class="text-muted"> </small></p>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">@Loc["FetchDateLabel"]
                            @item.FetchDate.ToString("dd/MM/yyyy")</small>
                    </div>
                </div>
            </div>
        }
    </div>
}
<div class="row justify-content-center">
    <ul class="pagination">
        <li class="page-item @(currentPage == 1 ? "disabled" : "")" @onclick="PrevPage">
            <a class="page-link" aria-disabled="true">@Loc["PreviusPageLabel"]</a>
        </li>
        @for (var i = currentPage - 2; i <= currentPage + 2; i++)
        {
            if (i <= 0 || i > TotalPages)
                continue;
            int j = i;
            if (i == currentPage)
            {
                <li class='page-item active' @onclick='() => ShowInfo(j)'>
                    <a class="page-link">@i</a>
                </li>
            }
            else
            {
                <li class='page-item' @onclick='() => ShowInfo(j)'>
                    <a class="page-link">@i</a>
                </li>
            }
        }
        <li class="page-item" @onclick="NextPage">
            <a class="page-link">@Loc["NextPageLabel"]</a>
        </li>
    </ul>
</div>

@code {
    private BaseItemModel[]? items;
    private int currentPage = 1;
    public int Count { get; set; }
    public int PageSize { get; set; } = 30;
    public int TotalPages { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        Count = await Http.GetFromJsonAsync<int>("/ItemList/count");
        TotalPages = (int)Math.Ceiling(decimal.Divide(Count, PageSize));
        await ShowInfo();
    }

    protected async Task NextPage()
    {
        if (currentPage < TotalPages) { currentPage++; await ShowInfo(); }
    }
    protected async Task PrevPage()
    {
        if
        (currentPage > 1)
        {
            currentPage--;
            await ShowInfo();
        }
    }

    protected async Task ShowInfo()
    {
        items = await Http.GetFromJsonAsync<BaseItemModel[]>($"/ItemList?page={currentPage}");
    }

    protected async Task ShowInfo(int page)
    {
        currentPage = page;
        await ShowInfo();
    }
}