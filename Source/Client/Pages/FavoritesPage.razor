@page "/favorites"
@using GoodsTracker.Platform.Shared.Models
@inject IStringLocalizer<SharedResource> Loc
@inject ItemManagementService ItemManagementService
@inject UserAlertService AlertService

<PageTitle>@Loc["FavoritesLabel"]</PageTitle>

<div class="p-3">
    <h1>@Loc["FavoritesLabel"]</h1>
    
    <hr/>
    
    <AuthorizeView>
        <Authorized>
            <div class="container">
                <div class="col justify-content-center">
                    @foreach(var item in FavoriteItems)
                    {
                        <FavoriteItemCard Item="item"></FavoriteItemCard>
                    }
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="d-flex mt-5 justify-content-center">
                <h3>@Loc["NotAuthorizedToSeeFavorites"] <NavLink href="login">@Loc["LoginInvite"]</NavLink>.</h3>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [CascadingParameter]
    Task<AuthenticationState>? AuthenticationState { get; set; }
    
    private IEnumerable<BaseItemModel> FavoriteItems { get; set; } = new List<BaseItemModel>();
    
    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.IsAuthenticated)
        {
            await FetchDataAsync().ConfigureAwait(false);
        }
    }
    
    private async Task FetchDataAsync()
    {
        var getFavorites = await ItemManagementService.GetFavorites().ConfigureAwait(false);
        if (getFavorites.IsFailed)
        {
            AlertService.AddMessage(new UserAlert(Loc["SomethingWentWrongMessage"], Alerts.Warning));
        }
        
        FavoriteItems = getFavorites.Value;
    }
}
